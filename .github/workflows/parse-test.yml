name: Parse Test

on:   
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  sdir-opt:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build

    - name: Load MLIR cache
      id: mlir-cache
      uses: actions/cache@v2
      with:
        path: llvm-project/build
        key: ${{ runner.os }}-mlir-commit
    
    - name: Build MLIR
      if: steps.mlir-cache.outputs.cache-hit != 'true'
      run: |
        mkdir llvm-project/build
        cd llvm-project/build
        cmake -G Ninja ../llvm -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_TARGETS_TO_BUILD="host" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON
        ninja 

    - name: Build & Test
      run: |
        mkdir build
        cd build
        cmake -G Ninja .. -DMLIR_DIR=${{github.workspace}}/llvm-project/build/lib/cmake/mlir -DLLVM_EXTERNAL_LIT=${{github.workspace}}/llvm-project/build/bin/llvm-lit
        ninja
        cd ../test/SDIR
        succ=0
        for filename in $(find test/SDIR/Dialect/* -name '*.mlir'); do
            if grep -q XFAIL "$filename"; then
                if ../../build/bin/sdir-opt $filename &> /dev/null; then
                    echo "$filename Xpassed!"
                    succ=1
                fi
            else
                if ! ../../build/bin/sdir-opt $filename &> /dev/null; then
                    echo "$filename failed!"
                    succ=1
                fi
            fi
        done
        if [ $succ -eq 0 ]; then
          echo "All tests parsed successfully!"
          exit 0
        fi
        exit 1


      
